// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using StaffControlServer.Context;

#nullable disable

namespace StaffControlServer.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240531093732_ReInit")]
    partial class ReInit
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("StaffControlServer.Data.ApplicationUserRole", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = new Guid("0b7102a9-24e3-48d2-9529-4c4c4c7712e7"),
                            RoleId = new Guid("f69976cc-155a-482d-93aa-e61e08c56700")
                        });
                });

            modelBuilder.Entity("StaffControlServer.Data.Calendar", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Calendars");
                });

            modelBuilder.Entity("StaffControlServer.Data.Department", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Departments");

                    b.HasData(
                        new
                        {
                            Id = new Guid("92d28d28-05b3-4afc-9add-7dc03732069c"),
                            DateCreated = new DateTime(2024, 5, 31, 9, 37, 31, 241, DateTimeKind.Utc).AddTicks(6347),
                            Name = "Отдел маркетинга"
                        },
                        new
                        {
                            Id = new Guid("5099d7d9-9f3d-44ec-afba-25a18541d1df"),
                            DateCreated = new DateTime(2024, 5, 31, 9, 37, 31, 241, DateTimeKind.Utc).AddTicks(6351),
                            Name = "Отдел разработки"
                        },
                        new
                        {
                            Id = new Guid("dcc52fcb-2e1a-4f03-b230-d44d7d05eb69"),
                            DateCreated = new DateTime(2024, 5, 31, 9, 37, 31, 241, DateTimeKind.Utc).AddTicks(6352),
                            Name = "Отдел продаж"
                        },
                        new
                        {
                            Id = new Guid("ee52a5ff-2a27-48e7-a035-04d4ec54b5e4"),
                            DateCreated = new DateTime(2024, 5, 31, 9, 37, 31, 241, DateTimeKind.Utc).AddTicks(6353),
                            Name = "Отдел финансов"
                        });
                });

            modelBuilder.Entity("StaffControlServer.Data.FileSystem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FileExtension")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("NewsId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("NewsId");

                    b.ToTable("FileSystem");
                });

            modelBuilder.Entity("StaffControlServer.Data.News", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("News");
                });

            modelBuilder.Entity("StaffControlServer.Data.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<Guid?>("DepartmentId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<Guid?>("ParentRoleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.HasIndex("ParentRoleId");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("f69976cc-155a-482d-93aa-e61e08c56700"),
                            Name = "Системный администратор",
                            NormalizedName = "СИСТЕМНЫЙ АДМИНИСТРАТОР"
                        },
                        new
                        {
                            Id = new Guid("459ca162-404a-40d0-81dc-67ce01c72ac8"),
                            Name = "Генеральный директор",
                            NormalizedName = "ГЕНЕРАЛЬНЫЙ ДИРЕКТОР"
                        },
                        new
                        {
                            Id = new Guid("8328b880-df7e-4663-9b7c-abcf1384218b"),
                            DepartmentId = new Guid("5099d7d9-9f3d-44ec-afba-25a18541d1df"),
                            Name = "Руководитель отдела разработки",
                            NormalizedName = "РУКОВОДИТЕЛЬ ОТДЕЛА РАЗРАБОТКИ",
                            ParentRoleId = new Guid("459ca162-404a-40d0-81dc-67ce01c72ac8")
                        },
                        new
                        {
                            Id = new Guid("5087591e-c379-462a-aa20-016dd96e2f90"),
                            DepartmentId = new Guid("5099d7d9-9f3d-44ec-afba-25a18541d1df"),
                            Name = "Менеджер проекта",
                            NormalizedName = "МЕНЕДЖЕР ПРОЕКТА",
                            ParentRoleId = new Guid("8328b880-df7e-4663-9b7c-abcf1384218b")
                        },
                        new
                        {
                            Id = new Guid("77622901-8917-4f35-987b-f89872f1a36c"),
                            DepartmentId = new Guid("5099d7d9-9f3d-44ec-afba-25a18541d1df"),
                            Name = "Разработчик",
                            NormalizedName = "РАЗРАБОТЧИК",
                            ParentRoleId = new Guid("5087591e-c379-462a-aa20-016dd96e2f90")
                        },
                        new
                        {
                            Id = new Guid("2558af9c-967d-4cc0-a3cf-4b7c92c93645"),
                            DepartmentId = new Guid("5099d7d9-9f3d-44ec-afba-25a18541d1df"),
                            Name = "Тестировщик",
                            NormalizedName = "ТЕСТИРОВЩИК",
                            ParentRoleId = new Guid("5087591e-c379-462a-aa20-016dd96e2f90")
                        },
                        new
                        {
                            Id = new Guid("e3adfc09-2204-4d8f-860f-6e213c650541"),
                            DepartmentId = new Guid("92d28d28-05b3-4afc-9add-7dc03732069c"),
                            Name = "Руководитель отдела маркеткинга",
                            NormalizedName = "РУКОВОДИТЕЛЬ ОТДЕЛА МАРКЕТКИНГА",
                            ParentRoleId = new Guid("459ca162-404a-40d0-81dc-67ce01c72ac8")
                        },
                        new
                        {
                            Id = new Guid("eff5acf2-a045-48f2-95a4-adbdcabc1652"),
                            DepartmentId = new Guid("92d28d28-05b3-4afc-9add-7dc03732069c"),
                            Name = "Менеджер по маркетингу",
                            NormalizedName = "МЕНЕДЖЕР ПО МАРКЕТИНГУ",
                            ParentRoleId = new Guid("e3adfc09-2204-4d8f-860f-6e213c650541")
                        },
                        new
                        {
                            Id = new Guid("3567b65f-222d-46ff-8513-1c64a72f0be6"),
                            DepartmentId = new Guid("92d28d28-05b3-4afc-9add-7dc03732069c"),
                            Name = "Менеджер по продвижению",
                            NormalizedName = "МЕНЕДЖЕР ПО ПРОДВИЖЕНИЮ",
                            ParentRoleId = new Guid("e3adfc09-2204-4d8f-860f-6e213c650541")
                        },
                        new
                        {
                            Id = new Guid("a98e7ecb-f28d-4151-9cc3-583bf2b6d56d"),
                            DepartmentId = new Guid("dcc52fcb-2e1a-4f03-b230-d44d7d05eb69"),
                            Name = "Руководитель отдела продаж",
                            NormalizedName = "РУКОВОДИТЕЛЬ ОТДЕЛА ПРОДАЖ",
                            ParentRoleId = new Guid("459ca162-404a-40d0-81dc-67ce01c72ac8")
                        },
                        new
                        {
                            Id = new Guid("16e27f3c-5bc7-4032-a920-d924963a610e"),
                            DepartmentId = new Guid("dcc52fcb-2e1a-4f03-b230-d44d7d05eb69"),
                            Name = "Менеджер по продажам",
                            NormalizedName = "МЕНЕДЖЕР ПО ПРОДАЖАМ",
                            ParentRoleId = new Guid("a98e7ecb-f28d-4151-9cc3-583bf2b6d56d")
                        },
                        new
                        {
                            Id = new Guid("068eeb45-e637-4438-9c24-f146b119d7a2"),
                            DepartmentId = new Guid("dcc52fcb-2e1a-4f03-b230-d44d7d05eb69"),
                            Name = "Консультант-продавец",
                            NormalizedName = "КОНСУЛЬТАНТ-ПРОДАВЕЦ",
                            ParentRoleId = new Guid("a98e7ecb-f28d-4151-9cc3-583bf2b6d56d")
                        },
                        new
                        {
                            Id = new Guid("2c30d355-ecd2-4acd-90c8-896597835011"),
                            DepartmentId = new Guid("ee52a5ff-2a27-48e7-a035-04d4ec54b5e4"),
                            Name = "Руководитель отдела финансов",
                            NormalizedName = "РУКОВОДИТЕЛЬ ОТДЕЛА ФИНАНСОВ",
                            ParentRoleId = new Guid("459ca162-404a-40d0-81dc-67ce01c72ac8")
                        },
                        new
                        {
                            Id = new Guid("51a54b3a-bb02-4d39-87ab-93f92700756e"),
                            DepartmentId = new Guid("ee52a5ff-2a27-48e7-a035-04d4ec54b5e4"),
                            Name = "Бухгалтер",
                            NormalizedName = "БУХГАЛТЕР",
                            ParentRoleId = new Guid("2c30d355-ecd2-4acd-90c8-896597835011")
                        });
                });

            modelBuilder.Entity("StaffControlServer.Data.ToDo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CompleteDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("ResponsibleId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("ResponsibleId");

                    b.HasIndex("UserId");

                    b.ToTable("ToDoes");
                });

            modelBuilder.Entity("StaffControlServer.Data.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("FileId")
                        .HasColumnType("uuid");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<Guid?>("ParentUserId")
                        .HasColumnType("uuid");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("RoleId")
                        .HasColumnType("uuid");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<string>("TwoFactorCode")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("FileId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.HasIndex("ParentUserId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("0b7102a9-24e3-48d2-9529-4c4c4c7712e7"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6d35ba71-bc8e-4f97-a70f-e4d6723abf99",
                            Email = "admin@admin.admin",
                            EmailConfirmed = false,
                            FirstName = "Admin",
                            LastName = "Admin",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@ADMIN.ADMIN",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEBcJ1ACjqfFiSziER999GGiXA9ZdWqHin/6DaQVHcyipyhHjyMMmeiuMhQ5u3ju0bA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9e5e857f-c59f-4709-89c9-839222a6c4d2",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("StaffControlServer.Data.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("StaffControlServer.Data.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("StaffControlServer.Data.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("StaffControlServer.Data.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("StaffControlServer.Data.ApplicationUserRole", b =>
                {
                    b.HasOne("StaffControlServer.Data.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StaffControlServer.Data.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("StaffControlServer.Data.Calendar", b =>
                {
                    b.HasOne("StaffControlServer.Data.User", "User")
                        .WithMany("Calendars")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("StaffControlServer.Data.FileSystem", b =>
                {
                    b.HasOne("StaffControlServer.Data.News", "News")
                        .WithMany("Files")
                        .HasForeignKey("NewsId");

                    b.Navigation("News");
                });

            modelBuilder.Entity("StaffControlServer.Data.News", b =>
                {
                    b.HasOne("StaffControlServer.Data.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("StaffControlServer.Data.Role", b =>
                {
                    b.HasOne("StaffControlServer.Data.Department", "Department")
                        .WithMany("Roles")
                        .HasForeignKey("DepartmentId");

                    b.HasOne("StaffControlServer.Data.Role", "ParentRole")
                        .WithMany()
                        .HasForeignKey("ParentRoleId");

                    b.Navigation("Department");

                    b.Navigation("ParentRole");
                });

            modelBuilder.Entity("StaffControlServer.Data.ToDo", b =>
                {
                    b.HasOne("StaffControlServer.Data.User", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StaffControlServer.Data.User", "Responsible")
                        .WithMany()
                        .HasForeignKey("ResponsibleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StaffControlServer.Data.User", null)
                        .WithMany("ToDoList")
                        .HasForeignKey("UserId");

                    b.Navigation("Author");

                    b.Navigation("Responsible");
                });

            modelBuilder.Entity("StaffControlServer.Data.User", b =>
                {
                    b.HasOne("StaffControlServer.Data.FileSystem", "File")
                        .WithMany()
                        .HasForeignKey("FileId");

                    b.HasOne("StaffControlServer.Data.User", "ParentUser")
                        .WithMany()
                        .HasForeignKey("ParentUserId");

                    b.HasOne("StaffControlServer.Data.Role", null)
                        .WithMany("Users")
                        .HasForeignKey("RoleId");

                    b.Navigation("File");

                    b.Navigation("ParentUser");
                });

            modelBuilder.Entity("StaffControlServer.Data.Department", b =>
                {
                    b.Navigation("Roles");
                });

            modelBuilder.Entity("StaffControlServer.Data.News", b =>
                {
                    b.Navigation("Files");
                });

            modelBuilder.Entity("StaffControlServer.Data.Role", b =>
                {
                    b.Navigation("UserRoles");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("StaffControlServer.Data.User", b =>
                {
                    b.Navigation("Calendars");

                    b.Navigation("ToDoList");

                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
