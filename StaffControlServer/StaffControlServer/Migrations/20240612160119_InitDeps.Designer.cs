// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using StaffControlServer.Context;

#nullable disable

namespace StaffControlServer.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240612160119_InitDeps")]
    partial class InitDeps
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("RoleUser", b =>
                {
                    b.Property<Guid>("RolesId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UsersId")
                        .HasColumnType("uuid");

                    b.HasKey("RolesId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("RoleUser");
                });

            modelBuilder.Entity("StaffControlServer.Data.ApplicationUserRole", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = new Guid("1a3a0afa-64c7-4fc1-b95e-1b9794048007"),
                            RoleId = new Guid("6c1f0db7-a1f1-4a30-a3dd-2f87341ed105")
                        });
                });

            modelBuilder.Entity("StaffControlServer.Data.Calendar", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Calendars");
                });

            modelBuilder.Entity("StaffControlServer.Data.Department", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Departments");

                    b.HasData(
                        new
                        {
                            Id = new Guid("dd075121-8a6d-4212-a30f-a18dbe577b87"),
                            DateCreated = new DateTime(2024, 6, 12, 16, 1, 17, 743, DateTimeKind.Utc).AddTicks(4579),
                            Name = "CEO"
                        },
                        new
                        {
                            Id = new Guid("2a2a17b9-ed7f-4d4b-bfd2-47837ee4cef0"),
                            DateCreated = new DateTime(2024, 6, 12, 16, 1, 17, 743, DateTimeKind.Utc).AddTicks(4583),
                            Name = "Отдел маркетинга"
                        },
                        new
                        {
                            Id = new Guid("a87cf267-908f-48ff-960b-cc635865d4f3"),
                            DateCreated = new DateTime(2024, 6, 12, 16, 1, 17, 743, DateTimeKind.Utc).AddTicks(4583),
                            Name = "Отдел разработки"
                        },
                        new
                        {
                            Id = new Guid("0759e194-a97d-4578-b8cc-e6ae9c3c1200"),
                            DateCreated = new DateTime(2024, 6, 12, 16, 1, 17, 743, DateTimeKind.Utc).AddTicks(4585),
                            Name = "Отдел продаж"
                        },
                        new
                        {
                            Id = new Guid("69a0f599-ef26-4170-bf62-45d8deb3a88e"),
                            DateCreated = new DateTime(2024, 6, 12, 16, 1, 17, 743, DateTimeKind.Utc).AddTicks(4585),
                            Name = "Отдел финансов"
                        });
                });

            modelBuilder.Entity("StaffControlServer.Data.FileSystem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FileExtension")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("NewsId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("NewsId");

                    b.ToTable("FileSystem");
                });

            modelBuilder.Entity("StaffControlServer.Data.News", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("News");
                });

            modelBuilder.Entity("StaffControlServer.Data.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<Guid?>("DepartmentId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<Guid?>("ParentRoleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.HasIndex("ParentRoleId");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("6c1f0db7-a1f1-4a30-a3dd-2f87341ed105"),
                            DepartmentId = new Guid("dd075121-8a6d-4212-a30f-a18dbe577b87"),
                            Name = "Системный администратор",
                            NormalizedName = "СИСТЕМНЫЙ АДМИНИСТРАТОР"
                        },
                        new
                        {
                            Id = new Guid("8ca34e7b-facc-4af7-9d8c-9015357ef197"),
                            DepartmentId = new Guid("dd075121-8a6d-4212-a30f-a18dbe577b87"),
                            Name = "Генеральный директор",
                            NormalizedName = "ГЕНЕРАЛЬНЫЙ ДИРЕКТОР"
                        },
                        new
                        {
                            Id = new Guid("6b5d7ea3-b1c5-4c01-8af6-f612f6e04f52"),
                            DepartmentId = new Guid("a87cf267-908f-48ff-960b-cc635865d4f3"),
                            Name = "Руководитель отдела разработки",
                            NormalizedName = "РУКОВОДИТЕЛЬ ОТДЕЛА РАЗРАБОТКИ",
                            ParentRoleId = new Guid("8ca34e7b-facc-4af7-9d8c-9015357ef197")
                        },
                        new
                        {
                            Id = new Guid("7d172ed8-5518-4c5e-81ef-da1a3eeff6d6"),
                            DepartmentId = new Guid("a87cf267-908f-48ff-960b-cc635865d4f3"),
                            Name = "Менеджер проекта",
                            NormalizedName = "МЕНЕДЖЕР ПРОЕКТА",
                            ParentRoleId = new Guid("6b5d7ea3-b1c5-4c01-8af6-f612f6e04f52")
                        },
                        new
                        {
                            Id = new Guid("b72b2c1b-e144-4d13-8e3f-dc9ecb479b13"),
                            DepartmentId = new Guid("a87cf267-908f-48ff-960b-cc635865d4f3"),
                            Name = "Разработчик",
                            NormalizedName = "РАЗРАБОТЧИК",
                            ParentRoleId = new Guid("7d172ed8-5518-4c5e-81ef-da1a3eeff6d6")
                        },
                        new
                        {
                            Id = new Guid("e1135ff8-892e-4fc7-9395-33109e041819"),
                            DepartmentId = new Guid("a87cf267-908f-48ff-960b-cc635865d4f3"),
                            Name = "Тестировщик",
                            NormalizedName = "ТЕСТИРОВЩИК",
                            ParentRoleId = new Guid("7d172ed8-5518-4c5e-81ef-da1a3eeff6d6")
                        },
                        new
                        {
                            Id = new Guid("693c0570-ad70-4e65-a0a2-ee2fcc33dcb7"),
                            DepartmentId = new Guid("2a2a17b9-ed7f-4d4b-bfd2-47837ee4cef0"),
                            Name = "Руководитель отдела маркеткинга",
                            NormalizedName = "РУКОВОДИТЕЛЬ ОТДЕЛА МАРКЕТКИНГА",
                            ParentRoleId = new Guid("8ca34e7b-facc-4af7-9d8c-9015357ef197")
                        },
                        new
                        {
                            Id = new Guid("92c41728-be93-4a85-933f-09f42d156693"),
                            DepartmentId = new Guid("2a2a17b9-ed7f-4d4b-bfd2-47837ee4cef0"),
                            Name = "Менеджер по маркетингу",
                            NormalizedName = "МЕНЕДЖЕР ПО МАРКЕТИНГУ",
                            ParentRoleId = new Guid("693c0570-ad70-4e65-a0a2-ee2fcc33dcb7")
                        },
                        new
                        {
                            Id = new Guid("e73692b5-b5a7-46fa-969e-c9fd4019f8bd"),
                            DepartmentId = new Guid("2a2a17b9-ed7f-4d4b-bfd2-47837ee4cef0"),
                            Name = "Менеджер по продвижению",
                            NormalizedName = "МЕНЕДЖЕР ПО ПРОДВИЖЕНИЮ",
                            ParentRoleId = new Guid("693c0570-ad70-4e65-a0a2-ee2fcc33dcb7")
                        },
                        new
                        {
                            Id = new Guid("bfa3dec1-8f35-48b0-939b-c7224a208311"),
                            DepartmentId = new Guid("0759e194-a97d-4578-b8cc-e6ae9c3c1200"),
                            Name = "Руководитель отдела продаж",
                            NormalizedName = "РУКОВОДИТЕЛЬ ОТДЕЛА ПРОДАЖ",
                            ParentRoleId = new Guid("8ca34e7b-facc-4af7-9d8c-9015357ef197")
                        },
                        new
                        {
                            Id = new Guid("74efe83d-951f-44f6-bf59-31db51d8d1ed"),
                            DepartmentId = new Guid("0759e194-a97d-4578-b8cc-e6ae9c3c1200"),
                            Name = "Менеджер по продажам",
                            NormalizedName = "МЕНЕДЖЕР ПО ПРОДАЖАМ",
                            ParentRoleId = new Guid("bfa3dec1-8f35-48b0-939b-c7224a208311")
                        },
                        new
                        {
                            Id = new Guid("edd4b53b-4bf0-4654-bd5f-344f1df29ced"),
                            DepartmentId = new Guid("0759e194-a97d-4578-b8cc-e6ae9c3c1200"),
                            Name = "Консультант-продавец",
                            NormalizedName = "КОНСУЛЬТАНТ-ПРОДАВЕЦ",
                            ParentRoleId = new Guid("bfa3dec1-8f35-48b0-939b-c7224a208311")
                        },
                        new
                        {
                            Id = new Guid("dd310d94-265b-4121-8fd3-22ad139da96e"),
                            DepartmentId = new Guid("69a0f599-ef26-4170-bf62-45d8deb3a88e"),
                            Name = "Руководитель отдела финансов",
                            NormalizedName = "РУКОВОДИТЕЛЬ ОТДЕЛА ФИНАНСОВ",
                            ParentRoleId = new Guid("8ca34e7b-facc-4af7-9d8c-9015357ef197")
                        },
                        new
                        {
                            Id = new Guid("345f5305-ae37-4c91-9dd3-ff5cd3634724"),
                            DepartmentId = new Guid("69a0f599-ef26-4170-bf62-45d8deb3a88e"),
                            Name = "Бухгалтер",
                            NormalizedName = "БУХГАЛТЕР",
                            ParentRoleId = new Guid("dd310d94-265b-4121-8fd3-22ad139da96e")
                        });
                });

            modelBuilder.Entity("StaffControlServer.Data.ToDo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CompleteDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("ResponsibleId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("ResponsibleId");

                    b.HasIndex("UserId");

                    b.ToTable("ToDoes");
                });

            modelBuilder.Entity("StaffControlServer.Data.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("FileId")
                        .HasColumnType("uuid");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<Guid?>("ParentUserId")
                        .HasColumnType("uuid");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<string>("TwoFactorCode")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("FileId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.HasIndex("ParentUserId");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("1a3a0afa-64c7-4fc1-b95e-1b9794048007"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9f91b4d7-ec64-40d6-be98-f8afe09c48b9",
                            Email = "admin@admin.admin",
                            EmailConfirmed = false,
                            FirstName = "Admin",
                            LastName = "Admin",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@ADMIN.ADMIN",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEGc0ZmYZXHVkbxWKQpPt5nitIwrbfJe0fav1H99daSMCUD92fDuKU1dVZWk6XtFmpQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d50ba99b-f008-4d62-a861-dc0d94f49395",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("StaffControlServer.Data.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("StaffControlServer.Data.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("StaffControlServer.Data.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("StaffControlServer.Data.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RoleUser", b =>
                {
                    b.HasOne("StaffControlServer.Data.Role", null)
                        .WithMany()
                        .HasForeignKey("RolesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StaffControlServer.Data.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("StaffControlServer.Data.ApplicationUserRole", b =>
                {
                    b.HasOne("StaffControlServer.Data.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StaffControlServer.Data.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("StaffControlServer.Data.Calendar", b =>
                {
                    b.HasOne("StaffControlServer.Data.User", "User")
                        .WithMany("Calendars")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("StaffControlServer.Data.FileSystem", b =>
                {
                    b.HasOne("StaffControlServer.Data.News", "News")
                        .WithMany("Files")
                        .HasForeignKey("NewsId");

                    b.Navigation("News");
                });

            modelBuilder.Entity("StaffControlServer.Data.News", b =>
                {
                    b.HasOne("StaffControlServer.Data.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("StaffControlServer.Data.Role", b =>
                {
                    b.HasOne("StaffControlServer.Data.Department", "Department")
                        .WithMany("Roles")
                        .HasForeignKey("DepartmentId");

                    b.HasOne("StaffControlServer.Data.Role", "ParentRole")
                        .WithMany()
                        .HasForeignKey("ParentRoleId");

                    b.Navigation("Department");

                    b.Navigation("ParentRole");
                });

            modelBuilder.Entity("StaffControlServer.Data.ToDo", b =>
                {
                    b.HasOne("StaffControlServer.Data.User", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StaffControlServer.Data.User", "Responsible")
                        .WithMany()
                        .HasForeignKey("ResponsibleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StaffControlServer.Data.User", null)
                        .WithMany("ToDoList")
                        .HasForeignKey("UserId");

                    b.Navigation("Author");

                    b.Navigation("Responsible");
                });

            modelBuilder.Entity("StaffControlServer.Data.User", b =>
                {
                    b.HasOne("StaffControlServer.Data.FileSystem", "File")
                        .WithMany()
                        .HasForeignKey("FileId");

                    b.HasOne("StaffControlServer.Data.User", "ParentUser")
                        .WithMany()
                        .HasForeignKey("ParentUserId");

                    b.Navigation("File");

                    b.Navigation("ParentUser");
                });

            modelBuilder.Entity("StaffControlServer.Data.Department", b =>
                {
                    b.Navigation("Roles");
                });

            modelBuilder.Entity("StaffControlServer.Data.News", b =>
                {
                    b.Navigation("Files");
                });

            modelBuilder.Entity("StaffControlServer.Data.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("StaffControlServer.Data.User", b =>
                {
                    b.Navigation("Calendars");

                    b.Navigation("ToDoList");

                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
