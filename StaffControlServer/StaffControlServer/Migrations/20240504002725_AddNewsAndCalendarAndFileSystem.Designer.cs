// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using StaffControlServer.Context;

#nullable disable

namespace StaffControlServer.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240504002725_AddNewsAndCalendarAndFileSystem")]
    partial class AddNewsAndCalendarAndFileSystem
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("StaffControlServer.Data.ApplicationUserRole", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = new Guid("2074158c-720e-439a-ac34-dbfde99aa49a"),
                            RoleId = new Guid("a405cfe6-0c33-413d-bbdc-326323ede703")
                        });
                });

            modelBuilder.Entity("StaffControlServer.Data.Calendar", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Calendars");
                });

            modelBuilder.Entity("StaffControlServer.Data.Department", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Departments");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f27f5be5-7bb8-47bc-bec1-6a30b691830b"),
                            DateCreated = new DateTime(2024, 5, 4, 0, 27, 24, 769, DateTimeKind.Utc).AddTicks(7641),
                            Name = "Отдел маркетинга"
                        },
                        new
                        {
                            Id = new Guid("1fe6f671-7547-4c1c-9de4-ba379e885466"),
                            DateCreated = new DateTime(2024, 5, 4, 0, 27, 24, 769, DateTimeKind.Utc).AddTicks(7645),
                            Name = "Отдел разработки"
                        },
                        new
                        {
                            Id = new Guid("360d41c2-b342-4b1d-855f-0ebb797dbc2a"),
                            DateCreated = new DateTime(2024, 5, 4, 0, 27, 24, 769, DateTimeKind.Utc).AddTicks(7646),
                            Name = "Отдел продаж"
                        },
                        new
                        {
                            Id = new Guid("732825ec-9863-4dab-adff-f0d574a99cba"),
                            DateCreated = new DateTime(2024, 5, 4, 0, 27, 24, 769, DateTimeKind.Utc).AddTicks(7647),
                            Name = "Отдел финансов"
                        });
                });

            modelBuilder.Entity("StaffControlServer.Data.FileSystem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FileExtension")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("NewsId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("NewsId");

                    b.ToTable("FileSystem");
                });

            modelBuilder.Entity("StaffControlServer.Data.Location", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Latitude")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Longitude")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("StaffControlServer.Data.News", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("News");
                });

            modelBuilder.Entity("StaffControlServer.Data.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<Guid?>("DepartmentId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<Guid?>("ParentRoleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.HasIndex("ParentRoleId");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("a405cfe6-0c33-413d-bbdc-326323ede703"),
                            Name = "Системный администратор",
                            NormalizedName = "СИСТЕМНЫЙ АДМИНИСТРАТОР"
                        },
                        new
                        {
                            Id = new Guid("e8b7e16c-634d-45f2-ac7b-14e4ab07a591"),
                            Name = "Генеральный директор",
                            NormalizedName = "ГЕНЕРАЛЬНЫЙ ДИРЕКТОР"
                        },
                        new
                        {
                            Id = new Guid("a27e52ca-d68f-4f54-9f1d-4f88436418f4"),
                            DepartmentId = new Guid("1fe6f671-7547-4c1c-9de4-ba379e885466"),
                            Name = "Руководитель отдела разработки",
                            NormalizedName = "РУКОВОДИТЕЛЬ ОТДЕЛА РАЗРАБОТКИ",
                            ParentRoleId = new Guid("e8b7e16c-634d-45f2-ac7b-14e4ab07a591")
                        },
                        new
                        {
                            Id = new Guid("d69f420d-aa66-43e5-aae1-892809b5348a"),
                            DepartmentId = new Guid("1fe6f671-7547-4c1c-9de4-ba379e885466"),
                            Name = "Менеджер проекта",
                            NormalizedName = "МЕНЕДЖЕР ПРОЕКТА",
                            ParentRoleId = new Guid("a27e52ca-d68f-4f54-9f1d-4f88436418f4")
                        },
                        new
                        {
                            Id = new Guid("1649bdb7-85e8-4635-9b3c-205bcc3b1cd4"),
                            DepartmentId = new Guid("1fe6f671-7547-4c1c-9de4-ba379e885466"),
                            Name = "Разработчик",
                            NormalizedName = "РАЗРАБОТЧИК",
                            ParentRoleId = new Guid("d69f420d-aa66-43e5-aae1-892809b5348a")
                        },
                        new
                        {
                            Id = new Guid("ab372087-217c-41bd-a0f1-ed0dc92735e7"),
                            DepartmentId = new Guid("1fe6f671-7547-4c1c-9de4-ba379e885466"),
                            Name = "Тестировщик",
                            NormalizedName = "ТЕСТИРОВЩИК",
                            ParentRoleId = new Guid("d69f420d-aa66-43e5-aae1-892809b5348a")
                        },
                        new
                        {
                            Id = new Guid("cfe17a07-0b5a-4437-9982-de62f1a86e7c"),
                            DepartmentId = new Guid("f27f5be5-7bb8-47bc-bec1-6a30b691830b"),
                            Name = "Руководитель отдела маркеткинга",
                            NormalizedName = "РУКОВОДИТЕЛЬ ОТДЕЛА МАРКЕТКИНГА",
                            ParentRoleId = new Guid("e8b7e16c-634d-45f2-ac7b-14e4ab07a591")
                        },
                        new
                        {
                            Id = new Guid("d774d03e-b70b-46bf-8165-2364acf3c7b1"),
                            DepartmentId = new Guid("f27f5be5-7bb8-47bc-bec1-6a30b691830b"),
                            Name = "Менеджер по маркетингу",
                            NormalizedName = "МЕНЕДЖЕР ПО МАРКЕТИНГУ",
                            ParentRoleId = new Guid("cfe17a07-0b5a-4437-9982-de62f1a86e7c")
                        },
                        new
                        {
                            Id = new Guid("8f712bc2-c1c9-4674-87a5-75cdda8b334f"),
                            DepartmentId = new Guid("f27f5be5-7bb8-47bc-bec1-6a30b691830b"),
                            Name = "Менеджер по продвижению",
                            NormalizedName = "МЕНЕДЖЕР ПО ПРОДВИЖЕНИЮ",
                            ParentRoleId = new Guid("cfe17a07-0b5a-4437-9982-de62f1a86e7c")
                        },
                        new
                        {
                            Id = new Guid("b5fa73f6-585d-4b02-912e-7789d4b9e3f7"),
                            DepartmentId = new Guid("360d41c2-b342-4b1d-855f-0ebb797dbc2a"),
                            Name = "Руководитель отдела продаж",
                            NormalizedName = "РУКОВОДИТЕЛЬ ОТДЕЛА ПРОДАЖ",
                            ParentRoleId = new Guid("e8b7e16c-634d-45f2-ac7b-14e4ab07a591")
                        },
                        new
                        {
                            Id = new Guid("91b19c85-3d7d-473f-af17-ee057a484ed9"),
                            DepartmentId = new Guid("360d41c2-b342-4b1d-855f-0ebb797dbc2a"),
                            Name = "Менеджер по продажам",
                            NormalizedName = "МЕНЕДЖЕР ПО ПРОДАЖАМ",
                            ParentRoleId = new Guid("b5fa73f6-585d-4b02-912e-7789d4b9e3f7")
                        },
                        new
                        {
                            Id = new Guid("66484195-3f9d-4e5e-b19f-81dd4fb2535e"),
                            DepartmentId = new Guid("360d41c2-b342-4b1d-855f-0ebb797dbc2a"),
                            Name = "Консультант-продавец",
                            NormalizedName = "КОНСУЛЬТАНТ-ПРОДАВЕЦ",
                            ParentRoleId = new Guid("b5fa73f6-585d-4b02-912e-7789d4b9e3f7")
                        },
                        new
                        {
                            Id = new Guid("9a0176df-3ed4-4b11-a284-ee53013bc642"),
                            DepartmentId = new Guid("732825ec-9863-4dab-adff-f0d574a99cba"),
                            Name = "Руководитель отдела финансов",
                            NormalizedName = "РУКОВОДИТЕЛЬ ОТДЕЛА ФИНАНСОВ",
                            ParentRoleId = new Guid("e8b7e16c-634d-45f2-ac7b-14e4ab07a591")
                        },
                        new
                        {
                            Id = new Guid("69940bb5-d75f-46c3-90df-cb1dd534c7c4"),
                            DepartmentId = new Guid("732825ec-9863-4dab-adff-f0d574a99cba"),
                            Name = "Бухгалтер",
                            NormalizedName = "БУХГАЛТЕР",
                            ParentRoleId = new Guid("9a0176df-3ed4-4b11-a284-ee53013bc642")
                        });
                });

            modelBuilder.Entity("StaffControlServer.Data.ToDo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CompleteDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("ResponsibleId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("ResponsibleId");

                    b.HasIndex("UserId");

                    b.ToTable("ToDoes");
                });

            modelBuilder.Entity("StaffControlServer.Data.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("FileId")
                        .HasColumnType("uuid");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("LocationId")
                        .HasColumnType("uuid");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<Guid?>("ParentUserId")
                        .HasColumnType("uuid");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("RoleId")
                        .HasColumnType("uuid");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("FileId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.HasIndex("ParentUserId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("2074158c-720e-439a-ac34-dbfde99aa49a"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8484dfa3-61f5-4f66-a7c8-0d9a4ab4fa45",
                            Email = "admin@admin.admin",
                            EmailConfirmed = false,
                            FirstName = "Admin",
                            LastName = "Admin",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@ADMIN.ADMIN",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEAZ/+vy90WLrzzVEoM1HTdKkZKSuq3PSc+cViLyuG+blWWCK+F6Vb/vBwcuWXg996A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b5498cc3-a745-4778-a3d9-5cc0cc2a0cc7",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("StaffControlServer.Data.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("StaffControlServer.Data.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("StaffControlServer.Data.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("StaffControlServer.Data.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("StaffControlServer.Data.ApplicationUserRole", b =>
                {
                    b.HasOne("StaffControlServer.Data.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StaffControlServer.Data.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("StaffControlServer.Data.Calendar", b =>
                {
                    b.HasOne("StaffControlServer.Data.User", null)
                        .WithMany("Calendars")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("StaffControlServer.Data.FileSystem", b =>
                {
                    b.HasOne("StaffControlServer.Data.News", null)
                        .WithMany("Files")
                        .HasForeignKey("NewsId");
                });

            modelBuilder.Entity("StaffControlServer.Data.Location", b =>
                {
                    b.HasOne("StaffControlServer.Data.User", "User")
                        .WithOne("Location")
                        .HasForeignKey("StaffControlServer.Data.Location", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("StaffControlServer.Data.News", b =>
                {
                    b.HasOne("StaffControlServer.Data.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("StaffControlServer.Data.Role", b =>
                {
                    b.HasOne("StaffControlServer.Data.Department", "Department")
                        .WithMany("Roles")
                        .HasForeignKey("DepartmentId");

                    b.HasOne("StaffControlServer.Data.Role", "ParentRole")
                        .WithMany()
                        .HasForeignKey("ParentRoleId");

                    b.Navigation("Department");

                    b.Navigation("ParentRole");
                });

            modelBuilder.Entity("StaffControlServer.Data.ToDo", b =>
                {
                    b.HasOne("StaffControlServer.Data.User", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StaffControlServer.Data.User", "Responsible")
                        .WithMany()
                        .HasForeignKey("ResponsibleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StaffControlServer.Data.User", null)
                        .WithMany("ToDoList")
                        .HasForeignKey("UserId");

                    b.Navigation("Author");

                    b.Navigation("Responsible");
                });

            modelBuilder.Entity("StaffControlServer.Data.User", b =>
                {
                    b.HasOne("StaffControlServer.Data.FileSystem", "File")
                        .WithMany()
                        .HasForeignKey("FileId");

                    b.HasOne("StaffControlServer.Data.User", "ParentUser")
                        .WithMany()
                        .HasForeignKey("ParentUserId");

                    b.HasOne("StaffControlServer.Data.Role", null)
                        .WithMany("Users")
                        .HasForeignKey("RoleId");

                    b.Navigation("File");

                    b.Navigation("ParentUser");
                });

            modelBuilder.Entity("StaffControlServer.Data.Department", b =>
                {
                    b.Navigation("Roles");
                });

            modelBuilder.Entity("StaffControlServer.Data.News", b =>
                {
                    b.Navigation("Files");
                });

            modelBuilder.Entity("StaffControlServer.Data.Role", b =>
                {
                    b.Navigation("UserRoles");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("StaffControlServer.Data.User", b =>
                {
                    b.Navigation("Calendars");

                    b.Navigation("Location")
                        .IsRequired();

                    b.Navigation("ToDoList");

                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
