// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using StaffControlServer.Context;

#nullable disable

namespace StaffControlServer.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240430153748_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("StaffControlServer.Data.ApplicationUserRole", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = new Guid("88748af0-f54f-48cc-b76b-bf01c93fac38"),
                            RoleId = new Guid("89272620-ce0b-4d3f-96cf-561b0cc62ce6")
                        });
                });

            modelBuilder.Entity("StaffControlServer.Data.Department", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Departments");

                    b.HasData(
                        new
                        {
                            Id = new Guid("fd21c817-730e-4712-a194-f11967f91427"),
                            DateCreated = new DateTime(2024, 4, 30, 15, 37, 46, 963, DateTimeKind.Utc).AddTicks(9711),
                            Name = "Отдел маркетинга"
                        },
                        new
                        {
                            Id = new Guid("4026fb09-5408-41a1-ae15-1c8b349aab52"),
                            DateCreated = new DateTime(2024, 4, 30, 15, 37, 46, 963, DateTimeKind.Utc).AddTicks(9714),
                            Name = "Отдел разработки"
                        },
                        new
                        {
                            Id = new Guid("932fefa4-3f40-4b58-8f5a-bc9f831be411"),
                            DateCreated = new DateTime(2024, 4, 30, 15, 37, 46, 963, DateTimeKind.Utc).AddTicks(9715),
                            Name = "Отдел продаж"
                        },
                        new
                        {
                            Id = new Guid("cdd1484c-6106-4f2a-a9a2-4f3d51cabc7d"),
                            DateCreated = new DateTime(2024, 4, 30, 15, 37, 46, 963, DateTimeKind.Utc).AddTicks(9716),
                            Name = "Отдел финансов"
                        });
                });

            modelBuilder.Entity("StaffControlServer.Data.Location", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Latitude")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Longitude")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("StaffControlServer.Data.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<Guid?>("DepartmentId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<Guid?>("ParentRoleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.HasIndex("ParentRoleId");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("89272620-ce0b-4d3f-96cf-561b0cc62ce6"),
                            Name = "Системный администратор",
                            NormalizedName = "СИСТЕМНЫЙ АДМИНИСТРАТОР"
                        },
                        new
                        {
                            Id = new Guid("2a189754-abe5-4751-abbe-7d61b56587ae"),
                            Name = "Генеральный директор",
                            NormalizedName = "ГЕНЕРАЛЬНЫЙ ДИРЕКТОР"
                        },
                        new
                        {
                            Id = new Guid("98af3f9d-fc1c-4ce7-b31d-65b3e5bcd945"),
                            DepartmentId = new Guid("4026fb09-5408-41a1-ae15-1c8b349aab52"),
                            Name = "Руководитель отдела разработки",
                            NormalizedName = "РУКОВОДИТЕЛЬ ОТДЕЛА РАЗРАБОТКИ",
                            ParentRoleId = new Guid("2a189754-abe5-4751-abbe-7d61b56587ae")
                        },
                        new
                        {
                            Id = new Guid("86f5586e-d7d5-4706-aeb7-7731f086e461"),
                            DepartmentId = new Guid("4026fb09-5408-41a1-ae15-1c8b349aab52"),
                            Name = "Менеджер проекта",
                            NormalizedName = "МЕНЕДЖЕР ПРОЕКТА",
                            ParentRoleId = new Guid("98af3f9d-fc1c-4ce7-b31d-65b3e5bcd945")
                        },
                        new
                        {
                            Id = new Guid("4a349f34-d14d-4b9a-b0f2-6041ac649dee"),
                            DepartmentId = new Guid("4026fb09-5408-41a1-ae15-1c8b349aab52"),
                            Name = "Разработчик",
                            NormalizedName = "РАЗРАБОТЧИК",
                            ParentRoleId = new Guid("86f5586e-d7d5-4706-aeb7-7731f086e461")
                        },
                        new
                        {
                            Id = new Guid("f5af71f4-774e-4e5c-9a70-e782144a43c0"),
                            DepartmentId = new Guid("4026fb09-5408-41a1-ae15-1c8b349aab52"),
                            Name = "Тестировщик",
                            NormalizedName = "ТЕСТИРОВЩИК",
                            ParentRoleId = new Guid("86f5586e-d7d5-4706-aeb7-7731f086e461")
                        },
                        new
                        {
                            Id = new Guid("ca4e0b77-28b6-4b50-b9ce-5641861aded1"),
                            DepartmentId = new Guid("fd21c817-730e-4712-a194-f11967f91427"),
                            Name = "Руководитель отдела маркеткинга",
                            NormalizedName = "РУКОВОДИТЕЛЬ ОТДЕЛА МАРКЕТКИНГА",
                            ParentRoleId = new Guid("2a189754-abe5-4751-abbe-7d61b56587ae")
                        },
                        new
                        {
                            Id = new Guid("803a1481-c298-4c65-aed6-35137f3546bc"),
                            DepartmentId = new Guid("fd21c817-730e-4712-a194-f11967f91427"),
                            Name = "Менеджер по маркетингу",
                            NormalizedName = "МЕНЕДЖЕР ПО МАРКЕТИНГУ",
                            ParentRoleId = new Guid("ca4e0b77-28b6-4b50-b9ce-5641861aded1")
                        },
                        new
                        {
                            Id = new Guid("f73ad29e-8d5c-4a4b-a542-088022d25c63"),
                            DepartmentId = new Guid("fd21c817-730e-4712-a194-f11967f91427"),
                            Name = "Менеджер по продвижению",
                            NormalizedName = "МЕНЕДЖЕР ПО ПРОДВИЖЕНИЮ",
                            ParentRoleId = new Guid("ca4e0b77-28b6-4b50-b9ce-5641861aded1")
                        },
                        new
                        {
                            Id = new Guid("5fab8805-b02d-4cd8-9b87-4561825adb68"),
                            DepartmentId = new Guid("932fefa4-3f40-4b58-8f5a-bc9f831be411"),
                            Name = "Руководитель отдела продаж",
                            NormalizedName = "РУКОВОДИТЕЛЬ ОТДЕЛА ПРОДАЖ",
                            ParentRoleId = new Guid("2a189754-abe5-4751-abbe-7d61b56587ae")
                        },
                        new
                        {
                            Id = new Guid("8415c123-5def-4dca-9f29-3977c72a1daf"),
                            DepartmentId = new Guid("932fefa4-3f40-4b58-8f5a-bc9f831be411"),
                            Name = "Менеджер по продажам",
                            NormalizedName = "МЕНЕДЖЕР ПО ПРОДАЖАМ",
                            ParentRoleId = new Guid("5fab8805-b02d-4cd8-9b87-4561825adb68")
                        },
                        new
                        {
                            Id = new Guid("b8b9c5d0-4ce7-4b9a-8ba7-7d4a9bce941a"),
                            DepartmentId = new Guid("932fefa4-3f40-4b58-8f5a-bc9f831be411"),
                            Name = "Консультант-продавец",
                            NormalizedName = "КОНСУЛЬТАНТ-ПРОДАВЕЦ",
                            ParentRoleId = new Guid("5fab8805-b02d-4cd8-9b87-4561825adb68")
                        },
                        new
                        {
                            Id = new Guid("7a1f1013-1184-4212-a47f-8ea0d9599c57"),
                            DepartmentId = new Guid("cdd1484c-6106-4f2a-a9a2-4f3d51cabc7d"),
                            Name = "Руководитель отдела финансов",
                            NormalizedName = "РУКОВОДИТЕЛЬ ОТДЕЛА ФИНАНСОВ",
                            ParentRoleId = new Guid("2a189754-abe5-4751-abbe-7d61b56587ae")
                        },
                        new
                        {
                            Id = new Guid("d8a288eb-4535-405a-a893-95ef318169c2"),
                            DepartmentId = new Guid("cdd1484c-6106-4f2a-a9a2-4f3d51cabc7d"),
                            Name = "Бухгалтер",
                            NormalizedName = "БУХГАЛТЕР",
                            ParentRoleId = new Guid("7a1f1013-1184-4212-a47f-8ea0d9599c57")
                        });
                });

            modelBuilder.Entity("StaffControlServer.Data.ToDo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CompleteDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("ResponsibleId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("ResponsibleId");

                    b.HasIndex("UserId");

                    b.ToTable("ToDoes");
                });

            modelBuilder.Entity("StaffControlServer.Data.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("LocationId")
                        .HasColumnType("uuid");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<Guid?>("ParentUserId")
                        .HasColumnType("uuid");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("RoleId")
                        .HasColumnType("uuid");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.HasIndex("ParentUserId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("88748af0-f54f-48cc-b76b-bf01c93fac38"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "25e65e2b-4666-4deb-9efd-6ffa4c94372a",
                            Email = "admin@admin.admin",
                            EmailConfirmed = false,
                            FirstName = "Admin",
                            LastName = "Admin",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@ADMIN.ADMIN",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEKTQzFSpt+6fKrpdFdt4InTd/5Nsl4qNQgHjNEeaD9nqcFQKKCOBTE0hfKLL2dsbYA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "141873f7-fdc0-4547-8e62-499ecfb0188a",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("StaffControlServer.Data.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("StaffControlServer.Data.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("StaffControlServer.Data.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("StaffControlServer.Data.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("StaffControlServer.Data.ApplicationUserRole", b =>
                {
                    b.HasOne("StaffControlServer.Data.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StaffControlServer.Data.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("StaffControlServer.Data.Location", b =>
                {
                    b.HasOne("StaffControlServer.Data.User", "User")
                        .WithOne("Location")
                        .HasForeignKey("StaffControlServer.Data.Location", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("StaffControlServer.Data.Role", b =>
                {
                    b.HasOne("StaffControlServer.Data.Department", "Department")
                        .WithMany("Roles")
                        .HasForeignKey("DepartmentId");

                    b.HasOne("StaffControlServer.Data.Role", "ParentRole")
                        .WithMany()
                        .HasForeignKey("ParentRoleId");

                    b.Navigation("Department");

                    b.Navigation("ParentRole");
                });

            modelBuilder.Entity("StaffControlServer.Data.ToDo", b =>
                {
                    b.HasOne("StaffControlServer.Data.User", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StaffControlServer.Data.User", "Responsible")
                        .WithMany()
                        .HasForeignKey("ResponsibleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StaffControlServer.Data.User", null)
                        .WithMany("ToDoList")
                        .HasForeignKey("UserId");

                    b.Navigation("Author");

                    b.Navigation("Responsible");
                });

            modelBuilder.Entity("StaffControlServer.Data.User", b =>
                {
                    b.HasOne("StaffControlServer.Data.User", "ParentUser")
                        .WithMany()
                        .HasForeignKey("ParentUserId");

                    b.HasOne("StaffControlServer.Data.Role", null)
                        .WithMany("Users")
                        .HasForeignKey("RoleId");

                    b.Navigation("ParentUser");
                });

            modelBuilder.Entity("StaffControlServer.Data.Department", b =>
                {
                    b.Navigation("Roles");
                });

            modelBuilder.Entity("StaffControlServer.Data.Role", b =>
                {
                    b.Navigation("UserRoles");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("StaffControlServer.Data.User", b =>
                {
                    b.Navigation("Location")
                        .IsRequired();

                    b.Navigation("ToDoList");

                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
